#version 450

struct Particle {
    dvec3 pos;
    dvec3 vel;
    double mass;
};

uniform double dt = 0.1;

layout(std430, binding = 0) buffer Particles_in {
    Particle particles_in[];
};

layout(std430, binding = 1) buffer Particles_out {
    Particle particles_out[];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

const double G = 0.06;//6.67408e-11;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    dvec3 acceleration = dvec3(0.0);
    
    // Calculate acceleration due to gravity for each particle
    for (uint i = 0; i < particles_in.length(); i++) {
        if (i == index) continue;
        
        dvec3 direction = particles_in[i].pos - particles_in[index].pos;
        double distance = length(direction);
        direction = normalize(direction);
        
        acceleration += (G * particles_in[i].mass / (distance * distance)) * direction;
    }
    
    // Update position and velocity of particle using new acceleration
    Particle particle = particles_in[index];
    particle.vel += acceleration * dt;
    
    // Write updated particle to output buffer
    particles_out[index] = particle;
}